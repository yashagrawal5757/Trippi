CREATE DATABASE Trippi;
USE Trippi;

CREATE TABLE Listings (
id BIGINT PRIMARY KEY, city VARCHAR (255) NOT NULL, state VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL,
description TEXT, host_id BIGINT NOT NULL, neighborhood_overview TEXT, neighborhood VARCHAR(255), latitude
DECIMAL(10,7) NOT NULL, longitude DECIMAL(10,7) NOT NULL, accommodates INT, bathrooms DECIMAL(3,1) NOT NULL,
bedrooms INT, amenities VARCHAR(255), property_type VARCHAR(255), Price DECIMAL(10,2)
);

CREATE INDEX idx_host_id ON Listings(host_id);

CREATE TABLE Host (host_id BIGINT PRIMARY KEY, host_name VARCHAR(255) NOT NULL, host_identity_verified
VARCHAR(10),
FOREIGN KEY(host_id) REFERENCES Listings(host_id)
);

CREATE TABLE Reviews( listing_id BIGINT NOT NULL,rev_id BIGINT, date VARCHAR(20), reviewer_id BIGINT NOT NULL, reviewer_name
VARCHAR(255), comments LONGTEXT,
PRIMARY KEY (listing_id,rev_id,reviewer_id),
FOREIGN KEY(listing_id) REFERENCES Listings(id)
);

CREATE INDEX idx_city_state ON Listings(city, state);

CREATE TABLE Attractions(County VARCHAR(255), Name VARCHAR(255) NOT NULL,Address VARCHAR(255), Lat DECIMAL(10,7) NOT NULL,
Lng DECIMAL(10,7) NOT NULL,
Type VARCHAR(20),State
VARCHAR(255),
 City VARCHAR(255),
PRIMARY KEY (Lat, Lng, County));




# Insert in hosts

LOAD DATA LOCAL INFILE 'C:/Users/yasha/Desktop/Sem2/CIS 550 Databases/Project/datasets/hosts_data.csv'
INTO TABLE Host
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

select * from Reviews;

LOAD DATA LOCAL INFILE 'C:/Users/yasha/Desktop/Sem2/CIS 550 Databases/Project/datasets/reviews_filtered.csv'
INTO TABLE Reviews
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA LOCAL INFILE 'C:/Users/yasha/Desktop/Sem2/CIS 550 Databases/Project/datasets/attractions_df_new.csv'
INTO TABLE Attractions
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM Reviews

## Query running
#Get top 5 hosts with the most listings in the database

SELECT h.host_name, COUNT(*) AS num_listings
FROM Host h
JOIN Listings l ON h.host_id = l.host_id
GROUP BY h.host_name
ORDER BY num_listings DESC
LIMIT 5;

#Find all attractions within 5 miles of a specific listing, along with their type and address
SELECT Attractions.Name, Attractions.Type, Attractions.Address
FROM Attractions JOIN Listings ON Listings.city = Attractions.County AND Listings.state = Attractions.State
WHERE Listings.id = 2708 AND (3959 * ACOS(COS(RADIANS(Listings.latitude)) * COS(RADIANS(Attractions.Lat)) * COS(RADIANS(Attractions.Lng) - RADIANS(Listings.longitude)) + SIN(RADIANS(Listings.latitude)) * SIN(RADIANS(Attractions.Lat)))) <= 5;

#Find all neighborhoods in New York City that have at least 3 listings with a price less than $200 per night, and for each neighborhood, list the names of the listings and their prices:

WITH Neighbour AS (
    SELECT neighborhood, name, price
    FROM Listings
    WHERE city in ('New York','Los Angeles') AND price < 200
)
SELECT neighborhood, GROUP_CONCAT(name SEPARATOR ', ') AS listings, GROUP_CONCAT(CAST(price AS CHAR) SEPARATOR ', ') AS prices
FROM Neighbour
GROUP BY neighborhood
HAVING COUNT(*) >= 3;

#Find the host names for each host that has at least 5 reviews, and sort the results in descending order by the average number of reviews:

SELECT h.host_name, COUNT(l.id) AS num_listings, AVG(r.comments) AS avg_rating
FROM Host h
JOIN Listings l ON h.host_id = l.host_id
LEFT JOIN Reviews r ON l.id = r.listing_id
GROUP BY h.host_name
HAVING COUNT(DISTINCT l.id) >= 5
ORDER BY COUNT(DISTINCT l.id) DESC;


#Find the names of all hosts who have listings in the same city as the given host

WITH target_host AS (
  SELECT host_id, city
  FROM Listings
  WHERE host_id = '9171'
)
SELECT DISTINCT h.host_name
FROM Host h
JOIN Listings l ON h.host_id = l.host_id
JOIN target_host th ON l.city = th.city
WHERE h.host_id != th.host_id;

#Get the top 5 attractions in a given city and state combination that are closest to at least one listing with an average listing price of over $200.

WITH attraction_distances AS (
  SELECT a.Name, a.Type, a.Address, a.Lat, a.Lng, a.City, a.State, a.County,
         MIN(sqrt(pow(l.latitude - a.Lat, 2) + pow(l.longitude - a.Lng, 2))) AS distance
  FROM Attractions a
  JOIN Listings l ON l.city = a.County AND l.state = a.State
  WHERE l.city = 'Los Angeles' AND l.state = 'California' AND l.Price > 200
  GROUP BY a.Name, a.Type, a.Address, a.Lat, a.Lng, a.City, a.State, a.County
)
SELECT Name, Type, Address, Lat, Lng, City, State, County, distance AS min_distance
FROM attraction_distances
ORDER BY min_distance ASC
LIMIT 20;

#Find the top 10 reviewers who have reviewed the most listings, along with the number of listings they've reviewed:

WITH reviewer_stats AS (
  SELECT reviewer_id, COUNT(DISTINCT listing_id) AS num_listings_reviewed
  FROM Reviews
  GROUP BY reviewer_id
)
SELECT h.host_name AS reviewer_name, rs.num_listings_reviewed
FROM reviewer_stats rs
JOIN Host h ON rs.reviewer_id = h.host_id
ORDER BY rs.num_listings_reviewed DESC
LIMIT 10;

#Query 4 : Get the top 10 most popular attractions in a given city and state combination based on the number of listings that are within a 1-mile radius of the attraction. For each attraction, return the name, type, address, and the number of nearby listings.

WITH nearby_listings AS (
  SELECT id, city, state, latitude, longitude
  FROM Listings
  WHERE city = 'Los Angeles' AND state = 'California'
), attractions_listings AS (
  SELECT A.Name, A.Type, A.Address, COUNT(*) AS num_listings
  FROM Attractions A
  JOIN nearby_listings N ON ST_Distance_Sphere(point(A.Lng, A.Lat), point(N.longitude, N.latitude)) <= 1609.34
  GROUP BY A.Name, A.Type, A.Address
), top_attractions AS (
  SELECT Name, Type, Address, num_listings,
         ROW_NUMBER() OVER (ORDER BY num_listings DESC) AS attraction_rank
  FROM attractions_listings
)
SELECT Name, Type, Address, num_listings
FROM top_attractions
WHERE attraction_rank <= 10;


#Query 5: Get the top 5 hosts with the highest number of listings in a given city and state combination, along with the average price of their listings and the number of reviews for each listing:

WITH host_listings AS (
  SELECT host_id, COUNT(*) AS num_listings, AVG(Price) AS avg_price
  FROM Listings
  WHERE city = 'Los Angeles' AND state = 'California'
  GROUP BY host_id
), listing_reviews AS (
  SELECT listing_id, COUNT(*) AS num_reviews
  FROM Reviews
  GROUP BY listing_id
)
SELECT h.host_name, hl.num_listings, hl.avg_price, SUM(lr.num_reviews) AS total_reviews
FROM Host h
JOIN host_listings hl ON h.host_id = hl.host_id
JOIN Listings l ON h.host_id = l.host_id
LEFT JOIN listing_reviews lr ON l.id = lr.listing_id
WHERE l.city = 'Los Angeles' AND l.state = 'California'
GROUP BY h.host_name, hl.num_listings, hl.avg_price
ORDER BY hl.num_listings DESC
LIMIT 5;

#Query 6: Find the top 10 neighborhoods in each city by the average price of listings with a "pool" amenity:

WITH pool_listings AS (
  SELECT l.id, l.city, l.state, l.neighborhood, l.price
  FROM Listings l
  WHERE l.amenities LIKE '%pool%' OR
        l.amenities LIKE '%Wifi%'
), neighborhood_averages AS (
  SELECT pl.city, pl.state, pl.neighborhood, AVG(pl.price) AS avg_price
  FROM pool_listings pl
  GROUP BY pl.city, pl.state, pl.neighborhood
), ranked_neighborhoods AS (
  SELECT city, state, neighborhood, avg_price,
     	ROW_NUMBER() OVER (PARTITION BY city, state ORDER BY avg_price DESC) AS ranks
  FROM neighborhood_averages
)
SELECT city, state, neighborhood, avg_price
FROM ranked_neighborhoods
WHERE ranks <= 20;

